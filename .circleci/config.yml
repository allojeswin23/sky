version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.0.1
### YAML Anchors for reuse
run_test_aws_access: &run_test_aws_access
  run:
    name: test aws access
    command: |
      aws sts get-caller-identity
deploy_update_parameter_store_version: &deploy_update_parameter_store_version
  deploy:
    name: update parameter store version
    command: aws ssm put-parameter --type String --name "${parameter_store_name}" --value "${parameter_store_value}" --overwrite
deploy_trigger_cloudformation_deployment: &deploy_trigger_cloudformation_deployment
  deploy:
    name: trigger deployment with cloudformation
    command: |
      # Prepare parameters for the cloudformation template to reuse all previous paramters.  Yes, it's ridiculous this isn't a cli option or the default behavior
      stack_params=$(aws cloudformation describe-stacks --stack-name "${cloudformation_stack_name}" | jq '.Stacks | map ({"ParameterKey": .Parameters[].ParameterKey, "UsePreviousValue": true})')
      # Run an update stack command using the previous template and the previous parameters. It may sound like this
      #   does nothing, but because the previous step updated the version in ParameterStore, CloudFormation will
      #   resolve the value of the Stack parameter to the new one
      aws cloudformation update-stack --stack-name "${cloudformation_stack_name}" --use-previous-template --parameters "${stack_params}" --capabilities CAPABILITY_NAMED_IAM
deploy_cloudformation_updation_check: &deploy_cloudformation_updation_check
  deploy:
    name: Check if CloudFormation Stack got updated successfully
    command: aws cloudformation wait stack-update-complete --stack-name "${cloudformation_stack_name}"

jobs:
  build:
    environment:
      RAILS_ENV: test
      RACK_ENV: test
      COVERAGE: true
    docker:
      # specify the version you desire here
       - image: circleci/ruby:8-node-browsers
         environment:
           SKYMAP_DB_USER: postgres
           SKYMAP_DB_PASSWORD: postgres
           RAILS_ENV: test
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
       - image: circleci/postgres:9.4
         environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
       - image: circleci/redis

    working_directory: ~/repo

    steps:
      - checkout
      - browser-tools/install-chrome
      # Download and cache dependencies
      - attach_workspace:
          at: ~/repo/tmp
      - run: mkdir /tmp/test-reports
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - run:
          name: install yarn
          command: |
            yarn install --ignore-engines
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            ./tmp/cc-test-reporter before-build
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      - run:
          name: Code Climate Test Coverage
          command: |
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json coverage/backend/.resultset.json
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.backend.json
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /home/circleci/repo/coverage
          destination: test-results

      # run security checks
#      - run:
#          name: dawnscanner security check
#          command: |
#            rake dawn:run
#
#      - store_artifacts:
#          path: /home/circleci/dawnscanner/results/repo/

      # - run:
      #     name: brakeman security check
      #     command: |
      #       bundle exec brakeman
  upload-coverage:
    docker:
      - image: circleci/ruby:2.5.1-stretch-node
    environment:
      - CC_TEST_REPORTER_ID: adab15c935d889b5190b85bbfd66f6ca573ab7e9d1fd1171f4cc56fea81c5bf6
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 1 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json
  docker-build-ecr:
    docker:
    - image: enquizit/cc-docker-git-aws:latest
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 19.03.13
    - run:
        name: Test aws access
        command: |
          aws sts get-caller-identity
          `aws ecr get-login --no-include-email`
    - run:
        name: Configure environment variables
        command: |
          account_id=$(aws sts get-caller-identity --output text --query "Account")
          region=$(aws configure list | grep region | awk '{print $2}')
          image_tag="${account_id}.dkr.ecr.${region}.amazonaws.com/skymap/skymap-app:${CIRCLE_SHA1}"
          echo "export account_id=${account_id}" >> $BASH_ENV
          echo "export region=${region}" >> $BASH_ENV
          echo "export image_tag=${image_tag}" >> $BASH_ENV
          # Add commit tags for release/hotfix branches
          if echo ${CIRCLE_BRANCH}  | grep -sqE "^(Release|Hotfix)_"; then
            echo "export MAJOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f1)" >> $BASH_ENV
            echo "export MINOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f2)" >> $BASH_ENV
            echo "export PATCH_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f3-)" >> $BASH_ENV
            echo "export BUILD_VERSION=g${CIRCLE_SHA1}" >> $BASH_ENV
          else
            CIRCLE_BRANCH_TEST=Release_D.E.V
            echo "export MAJOR_VERSION=$(echo $CIRCLE_BRANCH_TEST | cut -d_ -f2 | cut -d. -f1)" >> $BASH_ENV
            echo "export MINOR_VERSION=$(echo $CIRCLE_BRANCH_TEST | cut -d_ -f2 | cut -d. -f2)" >> $BASH_ENV
            echo "export PATCH_VERSION=$(echo $CIRCLE_BRANCH_TEST | cut -d_ -f2 | cut -d. -f3-)" >> $BASH_ENV
            echo "export BUILD_VERSION=g${CIRCLE_SHA1}" >> $BASH_ENV
          fi
    - run:
        name: Build skymap
        command: |
          docker build \
            --build-arg "BUILD_VERSION=g${CIRCLE_SHA1}" \
            --build-arg "MAJOR_VERSION=${MAJOR_VERSION}" \
            --build-arg "MINOR_VERSION=${MINOR_VERSION}" \
            --build-arg "PATCH_VERSION=${PATCH_VERSION}" \
            --build-arg "BUNDLE_GEMS__CONTRIBSYS__COM=${BUNDLE_GEMS__CONTRIBSYS__COM}" \
            --target rails \
            --tag "${image_tag}" .
    - deploy:
          name: Push docker-images to ecr with only the commit and latest tag
          command: |
            `aws ecr get-login --region us-east-2 --no-include-email`
            docker push "${image_tag}"
            # tag as latest for auto-deploy
            function ecr-retag {
              echo "Retagging ecr image [${1}:${2}] as [${1}:${3}]"
              aws ecr put-image --repository-name "$1" --image-tag "$3" --image-manifest "$(aws ecr batch-get-image --repository-name "$1" --image-ids imageTag="$2" --query images[].imageManifest --output text)"
            }
            if echo ${CIRCLE_BRANCH}  | grep -sqE "^(Release|Hotfix)_"; then
              ecr-retag skymap/skymap-app "${CIRCLE_SHA1}" "${CIRCLE_BRANCH}"
              ecr-retag skymap/skymap-app "${CIRCLE_SHA1}" "v${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
            else
              ecr-retag skymap/skymap-app "${CIRCLE_SHA1}" "latest"
            fi
  docker-tag-release:
      docker:
      - image: enquizit/cc-docker-git-aws:latest
      steps:
      - checkout
      - run:
          name: test aws access
          command: |
            aws sts get-caller-identity
      - run:
          name: Configure environment variables
          command: |
            # Add environment variables release/hotfix branches
            if echo ${CIRCLE_BRANCH}  | grep -sqE "^(Release|Hotfix)_"; then
              echo "export MAJOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f1)" >> $BASH_ENV
              echo "export MINOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f2)" >> $BASH_ENV
              echo "export PATCH_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f3-)" >> $BASH_ENV
            fi
      - deploy:
          name: retag image in ecr
          command: |
            function ecr-retag {
              echo "Regagging ecr image [${1}:${2}] as [${1}:${3}]"
              aws ecr put-image --repository-name "$1" --image-tag "$3" --image-manifest "$(aws ecr batch-get-image --repository-name "$1" --image-ids imageTag="$2" --query images[].imageManifest --output text)"
            }
            if [[ -z $MAJOR_VERSION || -z $MINOR_VERSION || -z PATCH_VERSION  ]]; then
              echo "FATAL: Could not find version tag in branch name.  This is required for approprate tagging.  MAJOR_VERSION='$MAJOR_VERSION' MINOR_VERSION='$MINOR_VERSION' PATCH_VERSION='$PATCH_VERSION'"
              exit 10
            else
              ecr-retag skymap/skymap "${CIRCLE_SHA1}" "${CIRCLE_BRANCH}"
              ecr-retag skymap/skymap "${CIRCLE_SHA1}" "v${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
            fi
  deploy-to-dev:
      docker:
      - image: enquizit/cc-docker-git-aws:latest
      steps:
      - checkout
      - <<: *run_test_aws_access
      - run:
          name: Configure environment variables
          command: |
            # Which environment
            aws_environment=dev
            echo "export aws_environment=${aws_environment}" >> $BASH_ENV
            # Name of the ParameterStore Parameter
            echo "export parameter_store_name=/${aws_environment}/task-info/skymap/skymap-app/current-image-tag" >> $BASH_ENV
            # What version to deploy
            echo "export parameter_store_value=${CIRCLE_SHA1}" >> $BASH_ENV
            # Stack to update with new tag version
            echo "export cloudformation_stack_name=skymap-ecs-tasks-${aws_environment}" >> $BASH_ENV
      - <<: *deploy_update_parameter_store_version
      - <<: *deploy_trigger_cloudformation_deployment
      - <<: *deploy_cloudformation_updation_check
  deploy-to-stg:
        docker:
        - image: enquizit/cc-docker-git-aws:latest
        steps:
        - checkout
        - <<: *run_test_aws_access
        - run:
            name: Configure environment variables
            command: |
              account_id=$(aws sts get-caller-identity --output text --query "Account")
              region=$(aws configure list | grep region | awk '{print $2}')
              image_tag="${account_id}.dkr.ecr.${region}.amazonaws.com/skymap/skymap-app:${CIRCLE_SHA1}"
              echo "export account_id=${account_id}" >> $BASH_ENV
              echo "export region=${region}" >> $BASH_ENV
              echo "export image_tag=${image_tag}" >> $BASH_ENV
              # Add commit tags for release/hotfix branches
              if echo ${CIRCLE_BRANCH}  | grep -sqE "^(Release|Hotfix)_"; then
                MAJOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f1)
                MINOR_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f2)
                PATCH_VERSION=$(echo $CIRCLE_BRANCH | cut -d_ -f2 | cut -d. -f3-)
                BUILD_VERSION=g${CIRCLE_SHA1}
                # Which environment
                aws_environment=stg
                echo "export aws_environment=${aws_environment}" >> $BASH_ENV
                # Name of the ParameterStore Parameter
                echo "export parameter_store_name=/${aws_environment}/task-info/skymap/skymap-app/current-image-tag" >> $BASH_ENV
                # What version to deploy
                version="v${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
                echo "export parameter_store_value=${version}" >> $BASH_ENV
                # Stack to update with new tag version
                echo "export cloudformation_stack_name=skymap-ecs-tasks-${aws_environment}" >> $BASH_ENV
              fi
        - <<: *deploy_update_parameter_store_version
        - <<: *deploy_trigger_cloudformation_deployment
        - <<: *deploy_cloudformation_updation_check
workflows:
  version: 2
  commit:
    jobs:
      - build
      - upload-coverage:
          requires:
             - build
  build-docker-lower:
    jobs:
      - docker-build-ecr:
          context: skymap-dev
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - deploy-dev
      - docker-tag-release:
          context: skymap-dev
          requires:
            - docker-build-ecr
          filters:
            branches:
              ignore: /.*/
      - deploy-to-dev:
          context: skymap-dev
          requires:
            - docker-build-ecr
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - deploy-dev
  build-docker-upper:
    jobs:
      - docker-build-ecr:
          context: skymap-dev
          filters:
            branches:
              only:
                # In form of "Release_1.22.3" or "Hotfix_1.22.333.4"
                - /Release_[0-9]+\.[0-9]+\.[0-9]+/
                - /Hotfix_[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/
      # - deploy-to-stg:
      #     context: skymap-dev
      #     requires:
      #       - docker-build-ecr
      #     filters:
      #       branches:
      #         only:
      #           - /Release_[0-9]+\.[0-9]+\.[0-9]+/
      #           - /Hotfix_[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/

      ###